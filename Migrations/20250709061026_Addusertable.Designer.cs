// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SaladCart.Data;

#nullable disable

namespace SaladCart.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250709061026_Addusertable")]
    partial class Addusertable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SaladCart.Models.CartDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("SaladId")
                        .HasColumnType("int");

                    b.Property<int>("ShoppingCartId")
                        .HasColumnType("int");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("SaladId");

                    b.HasIndex("ShoppingCartId");

                    b.ToTable("CartDetail");
                });

            modelBuilder.Entity("SaladCart.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("OrderStatusId")
                        .HasColumnType("int");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrderStatusId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("SaladCart.Models.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("SaladId")
                        .HasColumnType("int");

                    b.Property<int?>("SaladsId")
                        .HasColumnType("int");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("SaladsId");

                    b.ToTable("OrderDetail");
                });

            modelBuilder.Entity("SaladCart.Models.OrderStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("OrderStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            StatusId = 1,
                            StatusName = "Pending"
                        },
                        new
                        {
                            Id = 2,
                            StatusId = 2,
                            StatusName = "Shipped"
                        },
                        new
                        {
                            Id = 3,
                            StatusId = 3,
                            StatusName = "Delivered"
                        },
                        new
                        {
                            Id = 4,
                            StatusId = 4,
                            StatusName = "Cancelled"
                        },
                        new
                        {
                            Id = 5,
                            StatusId = 5,
                            StatusName = "Returned"
                        },
                        new
                        {
                            Id = 6,
                            StatusId = 6,
                            StatusName = "Refund"
                        });
                });

            modelBuilder.Entity("SaladCart.Models.Salads", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.ToTable("Salads");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Paneer Tikka Salad",
                            Name = "Paneer Tikka Salad",
                            Price = 200.0,
                            Quantity = 0,
                            Type = "Indian"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Sprouts Chat Salad",
                            Name = "Sprouts Chat Salad",
                            Price = 180.0,
                            Quantity = 0,
                            Type = "Indian"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Moong Dal Kosambari",
                            Name = "Moong Dal Kosambari",
                            Price = 180.0,
                            Quantity = 0,
                            Type = "Indian"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Soya Chunk Salad",
                            Name = "Soya Chunk Salad",
                            Price = 180.0,
                            Quantity = 0,
                            Type = "Indian"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Aloo Chana Chat Salad",
                            Name = "Aloo Chana Chat Salad",
                            Price = 180.0,
                            Quantity = 0,
                            Type = "Indian"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Beetroot Orange Salad",
                            Name = "Beetroot Orange Salad",
                            Price = 200.0,
                            Quantity = 0,
                            Type = "Continental"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Detox Thai Rainbow Salad",
                            Name = "Detox Thai Rainbow Salad",
                            Price = 200.0,
                            Quantity = 0,
                            Type = "Continental"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Quinoa Corn Salad",
                            Name = "Quinoa Corn Salad",
                            Price = 200.0,
                            Quantity = 0,
                            Type = "Continental"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Stir-Fry Veggis Salad",
                            Name = "Stir-Fry Veggis Salad",
                            Price = 200.0,
                            Quantity = 0,
                            Type = "Continental"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Pesto Pasta Salad",
                            Name = "Pesto Pasta Salad",
                            Price = 200.0,
                            Quantity = 0,
                            Type = "Continental"
                        },
                        new
                        {
                            Id = 11,
                            Description = "Mango Thai Salad",
                            Name = "Mango Thai Salad",
                            Price = 200.0,
                            Quantity = 0,
                            Type = "Fruits"
                        },
                        new
                        {
                            Id = 12,
                            Description = "Tropical Fruit  Salad",
                            Name = "Tropical Fruit  Salad",
                            Price = 200.0,
                            Quantity = 0,
                            Type = "Fruits"
                        },
                        new
                        {
                            Id = 13,
                            Description = "Apple Cucumber Yogurt Salad",
                            Name = "Apple Cucumber Yogurt Salad",
                            Price = 200.0,
                            Quantity = 0,
                            Type = "Fruits"
                        },
                        new
                        {
                            Id = 14,
                            Description = "Watermelon Feta  Salad",
                            Name = "Watermelon Feta  Salad",
                            Price = 200.0,
                            Quantity = 0,
                            Type = "Fruits"
                        },
                        new
                        {
                            Id = 15,
                            Description = "Seasonal Fruit Chat",
                            Name = "Seasonal Fruit Chat",
                            Price = 200.0,
                            Quantity = 0,
                            Type = "Fruits"
                        });
                });

            modelBuilder.Entity("SaladCart.Models.ShoppingCart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ShoppingCart");
                });

            modelBuilder.Entity("SaladCart.Models.Stock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("SaladId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SaladId")
                        .IsUnique();

                    b.ToTable("Stock");
                });

            modelBuilder.Entity("SaladCart.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("SaladCart.Models.CartDetail", b =>
                {
                    b.HasOne("SaladCart.Models.Salads", "Salad")
                        .WithMany("CartDetail")
                        .HasForeignKey("SaladId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SaladCart.Models.ShoppingCart", null)
                        .WithMany("CartDetails")
                        .HasForeignKey("ShoppingCartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Salad");
                });

            modelBuilder.Entity("SaladCart.Models.Order", b =>
                {
                    b.HasOne("SaladCart.Models.OrderStatus", "OrderStatus")
                        .WithMany()
                        .HasForeignKey("OrderStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderStatus");
                });

            modelBuilder.Entity("SaladCart.Models.OrderDetail", b =>
                {
                    b.HasOne("SaladCart.Models.Salads", null)
                        .WithMany("OrderDetail")
                        .HasForeignKey("SaladsId");
                });

            modelBuilder.Entity("SaladCart.Models.Stock", b =>
                {
                    b.HasOne("SaladCart.Models.Salads", "Salad")
                        .WithOne("Stock")
                        .HasForeignKey("SaladCart.Models.Stock", "SaladId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Salad");
                });

            modelBuilder.Entity("SaladCart.Models.Salads", b =>
                {
                    b.Navigation("CartDetail");

                    b.Navigation("OrderDetail");

                    b.Navigation("Stock")
                        .IsRequired();
                });

            modelBuilder.Entity("SaladCart.Models.ShoppingCart", b =>
                {
                    b.Navigation("CartDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
